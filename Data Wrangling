library(dplyr)
library(ggplot2)

# Read the data
df_1 <- read.csv("Student Mental Health.csv")
df_2 <- read.csv("Mental_Health_Care_in_the_Last_4_Weeks.csv")

# Merge the data frames
combo_df <- merge(df_1, df_2)

# Clean the data
final_df <- combo_df[1:25000, ]
final_df <- subset(final_df, select = -c(Suppression.Flag))

# Rename column "What.is.your.course." to "College_Major"
colnames(final_df)[colnames(final_df) == "What.is.your.course."] <- "College_Major"

# Convert Year of current study to lowercase and replace variations
final_df$Your.current.year.of.Study <- tolower(final_df$Your.current.year.of.Study)
final_df$Your.current.year.of.Study <- gsub("year", "year", final_df$Your.current.year.of.Study)

# Create grade_level column based on Year of current study
final_df$grade_level <- factor(final_df$Your.current.year.of.Study,
                               levels = c("year 1", "year 2", "year 3", "year 4"),
                               labels = c("Freshman", "Sophomore", "Junior", "Senior"))


# Calculate the total count of people in each grade level
total_counts <- table(final_df$grade_level)

# Convert College_Major to lowercase
final_df$College_Major <- tolower(final_df$College_Major)

# Define categories and corresponding regular expressions
categories <- c("Humanities", "Sciences", "Engineering", "Business")
patterns <- c("islamic education|pendidikan islam|irkhs|usuluddin|fiqh",
              "mathemathics|marine science|biomedical science|biotechnology",
              "engineering|enm|engine|engin",
              "bit|bcs|human resources|accounting|banking studies|business administration|econs|cts")




#Finished cleaning the data 



# Function to assign category based on pattern matching
assign_category <- function(major) {
  for (i in seq_along(patterns)) {
    if (grepl(patterns[i], major)) {
      return(categories[i])
    }
  }
  return("Other")
}

# Add a new column for category
final_df$category <- sapply(final_df$College_Major, assign_category)

# Print the unique categories
unique_categories <- unique(final_df$category)
print(unique_categories)

# Calculate the total count of people in each category
total_counts <- table(final_df$category)

# Calculate the count of people with depression in each category
depression_counts <- table(final_df$category, final_df$Do.you.have.Depression.)

# Calculate the percentage of people with depression within each category
percentage_depression <- depression_counts[, "Yes"] / total_counts * 100

# Create a data frame with the results
summary_data <- data.frame(Category = names(percentage_depression),
                           Percentage_Depression = as.numeric(percentage_depression))



#Create a graph for % of ppl in specific major with depression
# Plot the data
ggplot(summary_data, aes(x = Category, y = Percentage_Depression)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Percentage of People with Depression by College Major Category",
       x = "Category",
       y = "Percentage of People with Depression")








# Create a new graph calculating the depression rates by age 
# Calculate the total count of people in each grade level
total_counts <- table(final_df$grade_level)

# Calculate the count of people with depression in each grade level
depression_counts <- table(final_df$grade_level, final_df$Do.you.have.Depression.)

# Calculate the percentage of people with depression within each grade level
percentage_depression <- depression_counts[, "Yes"] / total_counts * 100

# Create a data frame with the results
summary_data_grade <- data.frame(Grade_Level = names(percentage_depression),
                                 Percentage_Depression = as.numeric(percentage_depression))

# Plot the data
ggplot(summary_data_grade, aes(x = Grade_Level, y = Percentage_Depression)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Percentage of People with Depression by Grade Level",
       x = "Grade Level",
       y = "Percentage of People with Depression")
